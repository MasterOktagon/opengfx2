//Rocks
spriteset (object_rock_overlay_normal, "../graphics/terrain/64/general_rockoverlay_alt_8bpp.png") { template_groundtiles(0, 0, 1) }
#ez alternative_sprites(object_rock_overlay_normal, ZOOM_LEVEL_IN_4X, BIT_DEPTH_8BPP, "../graphics/terrain/256/general_rockoverlay_alt_8bpp.png") { template_groundtiles(0, 0, 4) }
#32 alternative_sprites(object_rock_overlay_normal, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP, "../graphics/terrain/64/general_rockoverlay_alt_rm32bpp.png", "../graphics/terrain/64/general_rockoverlay_alt_8bpp.png") { template_groundtiles(0, 0, 1) }
#32 #ez alternative_sprites(object_rock_overlay_normal, ZOOM_LEVEL_IN_4X, BIT_DEPTH_32BPP, "../graphics/terrain/256/general_rockoverlay_alt_rm32bpp.png", "../graphics/terrain/256/general_rockoverlay_alt_8bpp.png") { template_groundtiles(0, 0, 4) }

spriteset (object_rock_overlay_snow, "../graphics/terrain/64/general_rockoverlay_snow_alt_8bpp.png") { template_groundtiles(0, 0, 1) }
#ez alternative_sprites(object_rock_overlay_snow, ZOOM_LEVEL_IN_4X, BIT_DEPTH_8BPP, "../graphics/terrain/256/general_rockoverlay_snow_alt_8bpp.png") { template_groundtiles(0, 0, 4) }
#32 alternative_sprites(object_rock_overlay_snow, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP, "../graphics/terrain/64/general_rockoverlay_snow_alt_rm32bpp.png", "../graphics/terrain/64/general_rockoverlay_snow_alt_8bpp.png") { template_groundtiles(0, 0, 1) }
#32 #ez alternative_sprites(object_rock_overlay_snow, ZOOM_LEVEL_IN_4X, BIT_DEPTH_32BPP, "../graphics/terrain/256/general_rockoverlay_snow_alt_rm32bpp.png", "../graphics/terrain/256/general_rockoverlay_snow_alt_8bpp.png") { template_groundtiles(0, 0, 4) }

spriteset (object_rock_overlay_coasts, "../graphics/terrain/64/general_rockoverlay_coasts_alt_8bpp.png") { template_groundtiles(0, 0, 1) }
#ez alternative_sprites(object_rock_overlay_coasts, ZOOM_LEVEL_IN_4X, BIT_DEPTH_8BPP, "../graphics/terrain/256/general_rockoverlay_coasts_alt_8bpp.png") { template_groundtiles(0, 0, 4) }
#32 alternative_sprites(object_rock_overlay_coasts, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP, "../graphics/terrain/64/general_rockoverlay_coasts_alt_rm32bpp.png", "../graphics/terrain/64/general_rockoverlay_coasts_alt_8bpp.png") { template_groundtiles(0, 0, 1) }
#32 #ez alternative_sprites(object_rock_overlay_coasts, ZOOM_LEVEL_IN_4X, BIT_DEPTH_32BPP, "../graphics/terrain/256/general_rockoverlay_coasts_alt_rm32bpp.png", "../graphics/terrain/256/general_rockoverlay_coasts_alt_8bpp.png") { template_groundtiles(0, 0, 4) }

recolour_rocks = reserve_sprites(4);

replace(recolour_rocks) {
    // identity
    recolour_sprite {
        0x00..0xFF: 0x00..0xFF;
    }
    // dark gray
    recolour_sprite {
        0x02..0x03: 0x01;
        0x04..0x0F: 0x01..0x0C;
    }
    // black
    recolour_sprite {
        0x02..0x05: 0x01;
        0x06..0x0F: 0x01..0x0A;
    }
    // brown 1
    recolour_sprite {
        0x01..0x05: 0x46;
        0x06..0x0F: 0x46..0x4F;
    }
    // brown 2
    recolour_sprite {
        0x01..0x04: 0x46;
        0x05: 0x47;
        0x06..0x0F: 0x70..0x79;
    }
}

// for general use
spritelayout object_rock_tiles_general {
    ground {
        sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
    }
    building {
        sprite: object_rock_overlay_normal(LOAD_TEMP(0));
        recolour_mode: RECOLOUR_REMAP;
        palette: recolour_rocks + LOAD_TEMP(4);
        always_draw: 1;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }
}

// for snow
spritelayout object_rock_tiles_snow {
    ground {
        sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
    }
    building {
        sprite: object_rock_overlay_snow(LOAD_TEMP(0));
        recolour_mode: RECOLOUR_REMAP;
        palette: recolour_rocks + LOAD_TEMP(4);
        always_draw: 1;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }
}

// for coasts
spritelayout object_rock_tiles_coast {
    ground {
        sprite: LOAD_TEMP(2) + 4061; // offset from flat water 4061
    }
    building {
        sprite: object_rock_overlay_coasts(LOAD_TEMP(0));
        recolour_mode: RECOLOUR_REMAP;
        palette: recolour_rocks + LOAD_TEMP(4);
        always_draw: 1;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }
}

// check for snow
switch(FEAT_OBJECTS, SELF, switch_object_rock_snow, [
    terrain_type == TILETYPE_SNOW
]) {
    1: object_rock_tiles_snow;
    object_rock_tiles_general;
}

// check for nearby water
switch (FEAT_OBJECTS, SELF, switch_object_rock_coasts, [
    (LOAD_TEMP(0) == 0) || // flat
    (LOAD_TEMP(0) == 3 && nearby_tile_water_class(-1, 0)) || // two raised corners
    (LOAD_TEMP(0) == 6 && nearby_tile_water_class(0, -1)) ||
    (LOAD_TEMP(0) == 9 && nearby_tile_water_class(0, 1)) ||
    (LOAD_TEMP(0) == 12 && nearby_tile_water_class(1, 0)) ||
    (LOAD_TEMP(0) == 1 && (nearby_tile_water_class(-1, 0) || nearby_tile_water_class(0, 1))) || // one raised corner
    (LOAD_TEMP(0) == 2 && (nearby_tile_water_class(-1, 0) || nearby_tile_water_class(0, -1))) ||
    (LOAD_TEMP(0) == 4 && (nearby_tile_water_class(1, 0) || nearby_tile_water_class(0, -1))) ||
    (LOAD_TEMP(0) == 8 && (nearby_tile_water_class(1, 0) || nearby_tile_water_class(0, 1)))
]) {
    1: object_rock_tiles_coast;
    switch_object_rock_snow;
}

// check elevation
switch (FEAT_OBJECTS, SELF, switch_object_rock_elevation, nearby_tile_height(0, 0)) {
    0: switch_object_rock_coasts;
    switch_object_rock_snow;
}

// get base index of ground tile set
switch (FEAT_OBJECTS, SELF, procedure_ground_tile_base_index, [
    terrain_type
]) {
    TILETYPE_DESERT: GROUNDSPRITE_DESERT;
    TILETYPE_SNOW: GROUNDSPRITE_SNOW;
    GROUNDSPRITE_NORMAL;
}


// translate slope index of ground tile to cost tile
switch (FEAT_OBJECTS, SELF, procedure_slope_to_coast_index, [
    LOAD_TEMP(0)
]) {
    0: 0;
    1: 2;
    2: 3;
    3: 7;
    4: 1;
    6: 5;
    8: 4;
    9: 8;
    12: 6;
    0;
}

// record index and offset of ground tile base and slope
// slope index offset -> 0, ground sprite base index -> 1, coast index offset -> 2, hide snow -> 3
switch (FEAT_OBJECTS, SELF, switch_object_rock_slopes, [
    STORE_TEMP(slope_to_sprite_offset(tile_slope), 0), // slope index offset -> 0
    STORE_TEMP(procedure_ground_tile_base_index(), 1), // ground sprite base index -> 1
    STORE_TEMP(procedure_slope_to_coast_index(), 2), // coast index offset -> 2
]) {
    switch_object_rock_elevation;
}

// set recolour -> 4
switch (FEAT_OBJECTS, SELF, switch_object_rock_object1, [
        STORE_TEMP(0, 4)
]) {
    switch_object_rock_slopes;
}
switch (FEAT_OBJECTS, SELF, switch_object_rock_object2, [
        STORE_TEMP(1, 4)
]) {
    switch_object_rock_slopes;
}
switch (FEAT_OBJECTS, SELF, switch_object_rock_object3, [
        STORE_TEMP(2, 4)
]) {
    switch_object_rock_slopes;
}
switch (FEAT_OBJECTS, SELF, switch_object_rock_object4, [
        STORE_TEMP(3, 4)
]) {
    switch_object_rock_slopes;
}
switch (FEAT_OBJECTS, SELF, switch_object_rock_object5, [
        STORE_TEMP(4, 4)
]) {
    switch_object_rock_slopes;
}

// bypass switches and use flat default ground, set recolour -> 4
switch (FEAT_OBJECTS, SELF, switch_object_rock_purchase1, [
        STORE_TEMP(0, 0),
        STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
        STORE_TEMP(0, 4)
]) {
    object_rock_tiles_general;
}
switch (FEAT_OBJECTS, SELF, switch_object_rock_purchase2, [
        STORE_TEMP(0, 0),
        STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
        STORE_TEMP(1, 4)
]) {
    object_rock_tiles_general;
}
switch (FEAT_OBJECTS, SELF, switch_object_rock_purchase3, [
        STORE_TEMP(0, 0),
        STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
        STORE_TEMP(2, 4)
]) {
    object_rock_tiles_general;
}
switch (FEAT_OBJECTS, SELF, switch_object_rock_purchase4, [
        STORE_TEMP(0, 0),
        STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
        STORE_TEMP(3, 4)
]) {
    object_rock_tiles_general;
}
switch (FEAT_OBJECTS, SELF, switch_object_rock_purchase5, [
        STORE_TEMP(0, 0),
        STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
        STORE_TEMP(4, 4)
]) {
    object_rock_tiles_general;
}

item (FEAT_OBJECTS, object_rocks, 10) {
    property {
        class: "ROCK";
        classname: string(STR_CLASS_ROCK);
        name: string(STR_OBJECT_ROCKS);
        climates_available: ALL_CLIMATES;
        size: [1, 1];
        build_cost_multiplier: 4;
        remove_cost_multiplier: 4;
        introduction_date: 0x00000000;
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ON_WATER, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_ANYTHING_REMOVE);
        height: 0;
        num_views: 1;
    }
    graphics {
        purchase: switch_object_rock_purchase1;
        autoslope: return(CB_RESULT_AUTOSLOPE);
        additional_text: string(STR_OBJECT_ROCKS_BUY);
        tile_check: CB_RESULT_LOCATION_ALLOW;
        default: switch_object_rock_object1;
    }
}

item (FEAT_OBJECTS, object_rocks_darkgray, 11) {
    property {
        class: "ROCK";
        classname: string(STR_CLASS_ROCK);
        name: string(STR_OBJECT_ROCKS_DARKGRAY);
        climates_available: ALL_CLIMATES;
        size: [1, 1];
        build_cost_multiplier: 4;
        remove_cost_multiplier: 4;
        introduction_date: 0x00000000;
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ON_WATER, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_ANYTHING_REMOVE);
        height: 0;
        num_views: 1;
    }
    graphics {
        purchase: switch_object_rock_purchase2;
        autoslope: return(CB_RESULT_AUTOSLOPE);
        additional_text: string(STR_OBJECT_ROCKS_BUY);
        tile_check: CB_RESULT_LOCATION_ALLOW;
        default: switch_object_rock_object2;
    }
}

item (FEAT_OBJECTS, object_rocks_black, 12) {
    property {
        class: "ROCK";
        classname: string(STR_CLASS_ROCK);
        name: string(STR_OBJECT_ROCKS_BLACK);
        climates_available: ALL_CLIMATES;
        size: [1, 1];
        build_cost_multiplier: 4;
        remove_cost_multiplier: 4;
        introduction_date: 0x00000000;
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ON_WATER, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_ANYTHING_REMOVE);
        height: 0;
        num_views: 1;
    }
    graphics {
        purchase: switch_object_rock_purchase3;
        autoslope: return(CB_RESULT_AUTOSLOPE);
        additional_text: string(STR_OBJECT_ROCKS_BUY);
        tile_check: CB_RESULT_LOCATION_ALLOW;
        default: switch_object_rock_object3;
    }
}

item (FEAT_OBJECTS, object_rocks_brown1, 13) {
    property {
        class: "ROCK";
        classname: string(STR_CLASS_ROCK);
        name: string(STR_OBJECT_ROCKS_BROWN1);
        climates_available: ALL_CLIMATES;
        size: [1, 1];
        build_cost_multiplier: 4;
        remove_cost_multiplier: 4;
        introduction_date: 0x00000000;
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ON_WATER, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_ANYTHING_REMOVE);
        height: 0;
        num_views: 1;
    }
    graphics {
        purchase: switch_object_rock_purchase4;
        autoslope: return(CB_RESULT_AUTOSLOPE);
        additional_text: string(STR_OBJECT_ROCKS_BUY);
        tile_check: CB_RESULT_LOCATION_ALLOW;
        default: switch_object_rock_object4;
    }
}

item (FEAT_OBJECTS, object_rocks_brown2, 14) {
    property {
        class: "ROCK";
        classname: string(STR_CLASS_ROCK);
        name: string(STR_OBJECT_ROCKS_BROWN2);
        climates_available: ALL_CLIMATES;
        size: [1, 1];
        build_cost_multiplier: 4;
        remove_cost_multiplier: 4;
        introduction_date: 0x00000000;
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ON_WATER, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_ANYTHING_REMOVE);
        height: 0;
        num_views: 1;
    }
    graphics {
        purchase: switch_object_rock_purchase5;
        autoslope: return(CB_RESULT_AUTOSLOPE);
        additional_text: string(STR_OBJECT_ROCKS_BUY);
        tile_check: CB_RESULT_LOCATION_ALLOW;
        default: switch_object_rock_object5;
    }
}
